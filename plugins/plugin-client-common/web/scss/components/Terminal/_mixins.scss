/*
 * Copyright 2020 The Kubernetes Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/** Inset of the <input> element w.r.t. the bordered/backgrounded region */
$inset: 0.5em;

/** Font size of e.g. timestamp */
$right-element-font-size-factor: 0.875;
$right-element-font-size: $right-element-font-size-factor + em;

/** Sizing for Block action buttons */
$action-padding: 3px;
$action-width: 2em;

/** Color to indicate focused block */
$focus-color: var(--color-brand-01);

$input-bg: var(--color-base00);
$input-bg-inverted: var(--color-base02);
$input-border: 1px solid rgba(150, 150, 150, 0.2);
$input-border-editing: var(--color-brand-03);

/** This is the left-hand border that defines each block region */
$block-border-width: 0.4375em;

$input-padding-left: 1.25em;
$input-padding-right: $input-padding-left;
$repl-context-min-width: 2em;
$repl-context-margin-right: 0.5em;

$section-break-margin: 2em 4em 2em 7em;

/** Hover hysteresis for showing action buttons */
$action-hover-delay: 210ms;

@mixin Scrollback {
  .kui--scrollback {
    @content;
  }
}

@mixin ScrollbackInvertedColors {
  @include Scrollback {
    &.kui--inverted-color-context {
      @content;
    }
  }
}

@mixin BottomStrip {
  &[data-position='bottom-strip'] {
    @content;
  }
}

@mixin ScrollbackBlockList {
  .kui--scrollback-block-list {
    @content;
  }
}

@mixin ScrollbackBlockListInner {
  .kui--scrollback-block-list-for-sizing {
    @content;
  }
}

@mixin IsNotFocusedSplit {
  &:not([data-is-focused]) {
    @content;
  }
}

@mixin NotFocusedSplit {
  @include Scrollback {
    @include IsNotFocusedSplit {
      @content;
    }
  }
}

@mixin SplitContainer {
  .kui--terminal-split-container {
    @content;
  }
}

@mixin MiniSplit {
  @include Scrollback {
    &[data-is-minisplit] {
      @content;
    }
  }
}

@mixin WidthConstrained {
  @include Scrollback {
    &[data-is-width-constrained] {
      @content;
    }
  }
}

@mixin PlainTerminal {
  @include Scrollback {
    &:not([data-is-minisplit]):not([data-is-width-constrained]) {
      @content;
    }
  }
}

@mixin Block {
  li.repl-block {
    @content;
  }
}

@mixin BlockFocusAttributes {
  &:focus,
  &[data-is-focused] {
    @content;
  }
}
@mixin BlockNotFocusedAttributes {
  &:not(:focus):not([data-is-focused]) {
    @content;
  }
}
@mixin FocusedBlock {
  @include Block {
    @include BlockFocusAttributes {
      @content;
    }
  }
}

@mixin SectionBreak {
  @include Block {
    &[data-is-section-break] {
      @content;
    }
  }
}

@mixin BlockAfterBlock {
  li.repl-block + li.repl-block {
    @content;
  }
}

@mixin MaximizedBlock {
  @include Block {
    &[data-is-maximized] {
      @content;
    }
  }
}

@mixin BlockHoverOrFocus {
  @include Scrollback {
    @include Block {
      &:focus {
        @include InputWrapper {
          @content;
        }
      }
    }
    @include FinishedBlock {
      @include InputWrapper {
        &:hover {
          @content;
        }
      }
    }
  }
}

/** A "T T" layout, i.e. two terminals side-by-side */
@mixin SideBySide {
  .repl .kui--terminal-split-container {
    &[data-split-count='2'],
    &[data-split-count='4'],
    &[data-split-count='5'],
    &[data-split-count='6'],
    &[data-split-count='7'],
    &[data-split-count='8'] {
      @content;
    }
  }
}

@mixin DisappearOnHover {
  opacity: 0; /* rather than display: none to avoid reflow on hover */
  transition-delay: $action-hover-delay;
}

@mixin BlockBorder {
  &:before {
    @content;
  }
}

@mixin ErrorBlock {
  @include Block {
    &.error {
      @content;
    }
  }
}

@mixin ActiveBlock {
  @include Block {
    &.repl-active {
      @content;
    }
  }
}

@mixin ProcessingBlock {
  @include Block {
    &.processing {
      @content;
    }
  }
}

@mixin FinishedBlock {
  @include Block {
    &:not(.repl-active) {
      @content;
    }
  }
}

@mixin FinishedBlockWithOutputOnly {
  @include FinishedBlock {
    &[data-is-output-only] {
      @content;
    }
  }
}

@mixin FinishedBlockWithInputAndOutput {
  @include FinishedBlock {
    &:not([data-is-output-only]) {
      @include BlockOutput {
        &.repl-result-has-content {
          @content;
        }
      }
    }
  }
}

@mixin FinishedBlockWithNoOutput {
  @include FinishedBlock {
    &:not([data-is-output-only]) {
      @include BlockOutput {
        &:not(.repl-result-has-content) {
          @content;
        }
      }
    }
  }
}

@mixin IsReplayedBlock {
  &[data-is-replay] {
    @content;
  }
}

@mixin ReplayedBlock {
  @include FinishedBlock {
    @include IsReplayedBlock {
      @content;
    }
  }
}

/** Hide the In[1] bits */
@mixin HideIn {
  @include Block {
    &[data-is-output-only],
    &:not([data-in-sections]):not([data-is-replay]) {
      .repl-context {
        display: none;
      }
    }
  }
}

/** The element that encloses Context and InputWrapper */
@mixin ContextAndInput {
  .kui--input-and-context {
    @content;
  }
}

@mixin Context {
  .repl-context {
    @content;
  }
}

@mixin ContextInner {
  .repl-context-inner {
    @content;
  }
}

/** The wrapper around the <input> element. This contains the <input> and the timestamp, duration, and block buttons. */
@mixin InputWrapper {
  .repl-input-element-wrapper {
    @content;
  }
}

/** The InputWrapper for blocks that have no output */
@mixin InputWrapperForEmptyBlock {
  @include FinishedBlock {
    &[data-is-empty]:not([data-is-focused]) {
      @include InputWrapper {
        @content;
      }
    }
  }
}

/** The input element itself */
@mixin Input {
  .repl-input-element {
    @content;
  }
}

/** Timestamp of block */
@mixin BlockTimestamp {
  .kui--repl-block-timestamp {
    @content;
  }
}

/** Duration of block */
@mixin BlockDuration {
  @include BlockTimestamp {
    .sub-text {
      @content;
    }
  }
}

/** Block action buttons, e.g. remove block, re-run command, ... */
@mixin BlockActions {
  .kui--block-actions-buttons {
    @content;
  }
}

@mixin BlockAction {
  .kui--block-action {
    @content;
  }
}

@mixin show-block-action-buttons {
  @include BlockActions {
    opacity: 1;
  }
}

/** Input portion of a Block */
@mixin BlockInput {
  .repl-input {
    @content;
  }
}

@mixin BlockInputWithActiveISearch {
  @include BlockInput {
    &.kui--isearch-active {
      @content;
    }
  }
}

/** Output portion of a Block */
@mixin BlockOutput {
  .repl-output {
    @content;
  }
}

@mixin CommandOutput {
  .repl-result {
    @content;
  }
}

/** Special designation for the output of experimental commands */
@mixin ExperimentalTag {
  /** Notes: Tag Carbon impl is the former; PatternFly impl is the latter */
  .kui--repl-block-experimental-tag .kui--tag,
  .kui--repl-block-experimental-tag.kui--tag {
    @content;
  }
}

/** Streaming output from jobs */
@mixin StreamingOutput {
  .repl-result-like[data-stream] {
    @content;
  }
}

/** Commentary section in a block */
@mixin Commentary {
  .kui--commentary {
    @content;
  }
}

/** Commentary card wrapper for the Commentary section */
@mixin CommentaryCard {
  .kui--commentary-card {
    @content;
  }
}

/** Specify a number of columns in the SplitContainer */
@mixin Columns($N) {
  grid-template-columns: repeat(#{$N}, 1fr);
}

/** Specify a number of rows in the SplitContainer */
@mixin Rows($N) {
  grid-template-rows: repeat(#{$N}, 1fr);
}

/** Two, three, etc. Splits in the current Tab */
@mixin Split($N) {
  @include SplitContainer {
    &[data-split-count='#{$N}'] {
      @content;
    }
  }
}

/** header for split */
@mixin SplitHeader {
  .kui--split-header {
    @content;
  }
}
@mixin SplitHeaderButton {
  .kui--split-header-button {
    @content;
  }
}

/** The Editor while editing a Commentary */
@mixin CommentaryEditor {
  .kui--commentary-editor {
    @content;
  }
}

/** The spinner element that we place either in the context [x] or near the timestamp/duration element */
@mixin Spinner {
  .kui--repl-block-spinner {
    @content;
  }
}
